#!/usr/bin/env node
process.env.NODE_ENV = 'test';

const logger = console;

const supertest = require('supertest');
const AWS = require('../src/utils/aws');

AWS.config.update({
    maxRetries: 2,
    httpOptions: {
        timeout: 1000,
        connectTimeout: 1000
    }
});

const aSecond = (t = 1000) => new Promise((r) => setTimeout(r, t));

const waitFor = async (fn) => {
    let expiresAt = Date.now() + (1000 * 60);

    let ready;

    while(!ready) {
        if(Date.now() >= expiresAt) {
            throw new Error("Timeout exceeded");
        }

        try {
            await fn();
            ready = true;
        } catch(e) {
            logger.error(e.message);
            await aSecond();
        }
    }
};

const waitForS3 = () => {
    const s3 = new AWS.S3();

    return waitFor(async () => {
        logger.info("Attempting to connect to s3");
        await s3.listBuckets().promise();
        logger.info("Connected to s3");
    });
};

const waitForS3Request = () => {
    return waitFor(async () => {
        logger.info("Attempting to connect to s3 via http");
        await supertest(AWS.config.endpoint).get('/')
            .expect(404, /running/);
        ;
        logger.info("Success");
    });
};

const waitForDynamoDB = () => {
    const dynamodb = new AWS.DynamoDB();
    return waitFor(async () => {
        logger.info("Attempting to connect to DynamoDB");
        await dynamodb.listTables().promise();
    });
};

const wait = async () => {
    const promises = [
        waitForS3(),
        waitForS3Request(),
        waitForDynamoDB(),
    ];

    await new Promise((res, rej) => {
        const timeoutId = setTimeout(() => rej("Timeout"), 1000 * 60);

        Promise.all(promises)
            .then(res)
            .catch(rej)
        ;

        clearTimeout(timeoutId);
    });
};

const main = async () => {
  try {
      logger.info("Waiting for localstack at", AWS.config.endpoint);
      await wait();
      logger.info("Ready");
  } catch(e) {
      logger.error(e);
      process.exit(1);
  }
};

main();
